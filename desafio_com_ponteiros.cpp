#include <iostream>
using namespace std;
//enunciado no final para melhor leitura do c√≥digo
void modificarFragmento(int *ptrFragmentos, int *ptrFragmentosModificados, int tamanho);

int main()
{
    int tamanho = 5;
    int fragmentos[tamanho]{1, 2, 3, 4, 5};
    int fragmentosModificados[tamanho];
    // int *ptrFragmentosModificados;
    for (int i = 0; i < tamanho; i++)
    {
        cout << fragmentos[i] << endl;
    }

    cout << "-------------------------" << endl;

    modificarFragmento(fragmentos, fragmentosModificados, tamanho);

    for (int i = 0; i < tamanho; i++)
    {
        cout << fragmentosModificados[i] << endl;
    }
    return 0;
}

void modificarFragmento(int *ptrFragmentos, int *ptrFragmentosModificados, int tamanho)
{
    for (int i = 0; i < tamanho; i++)
    {
        *(ptrFragmentosModificados + i) = *(ptrFragmentos + i) * 2;
    }
}

/*

üèùÔ∏è Desafio: A Ilha dos Desafios ‚Äì O Amuleto das Mem√≥rias
Contexto

Voc√™ √© um aventureiro preso em uma ilha misteriosa chamada Ilha dos Desafios. Para escapar, precisa recuperar partes perdidas da Mem√≥ria Ancestral, espalhadas em 5 templos m√°gicos. Cada templo guarda um fragmento de mem√≥ria escondido dentro de uma estrutura de dados. A √∫nica forma de acessar, modificar e combinar essas mem√≥rias √© usando ponteiros.


üéØ Objetivo
Criar um programa em C++ que:


Armazene 5 valores inteiros (fragmentos de mem√≥ria) em um vetor.


Use ponteiros para:


Acessar cada valor.


Dobrar o valor de cada fragmento (como forma de "ativ√°-lo").


Armazenar os novos valores em um vetor separado.


Exibir os dois vetores (antes e depois da ativa√ß√£o).



üß† Regras da Miss√£o
Use ponteiros para manipular os valores ‚Äî n√£o pode usar acesso direto com colchetes ([]) na modifica√ß√£o.


Fun√ß√µes com ponteiros s√£o obrigat√≥rias ‚Äî crie uma fun√ß√£o void ativarFragmentos(int* original, int* ativados, int tamanho) para processar os dados.


A entrada dos valores pode ser fixa ou lida pelo usu√°rio.



üì• Exemplo de Execu√ß√£o Esperada
Fragmentos encontrados: 4 7 1 3 8

Fragmentos ativados:   8 14 2 6 16



üß© Dicas T√©cnicas
Use int* ptr = vetor; para criar ponteiros.


Use aritm√©tica de ponteiros para navegar pelo vetor: *(ptr + i).


A fun√ß√£o ativarFragmentos pode percorrer com la√ßo for usando ponteiros.


*/